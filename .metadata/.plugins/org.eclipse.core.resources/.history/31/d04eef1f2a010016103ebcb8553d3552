package com.weather.activity;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONStringer;

import Gson.GUtil;
import Util.GetCity;
import Util.HttpDownloader;
import Util.Util;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ProgressDialog;
import android.database.CursorJoiner.Result;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.example.weather.R;

public class weather extends Activity implements TextWatcher {
	private EditText citynameEditText;
	private Button searchWeatherButton;
	private TextView citynametTextView;
	private TextView weahterTextView;
	private TextView tempTextView;
	private TextView winpTextView;
	private TextView daysTextView;
	private TextView locationTextView;
	private Button locationButton;
	private TextView gsonTextView;
	private Button gsonButton;
	String jonString;
	ProgressDialog progressDialog;
	private static final int SET = 1;

	private LocationClient locationClient = null;
	private MyLocationListener myListener;// 定位监听器

	@SuppressLint("HandlerLeak")
	private Handler handler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			System.out.println(msg.obj.toString());
			switch (msg.what) {
			case 2:
				Gson.WeaResult.Result result = (Gson.WeaResult.Result) msg.obj; 
				citynametTextView.setText(result.citynm);
				weahterTextView.setText(result.weather);
				tempTextView.setText(result.temperature);
				winpTextView.setText(result.wind);
				daysTextView.setText(result.days);
				
			
			case SET:

				Util util = new Util();

				try {
					List<Map<String, Object>> all = util.getInformation(msg.obj
							.toString());
					System.out.println(all.toString());
					Iterator<Map<String, Object>> iterator = all.iterator();
					while (iterator.hasNext()) {
						Map<String, Object> map = iterator.next();
						Log.d("天气", map.get("weather").toString());
						citynametTextView.setText(map.get("cityName")
								.toString());
						weahterTextView.setText(map.get("weather").toString());
						tempTextView.setText(map.get("temp").toString());
						winpTextView.setText(map.get("winp").toString());
						daysTextView.setText(map.get("days").toString());
					}
				} catch (Exception e) {
					e.printStackTrace();
					System.out.println("dd");
				}

			}

		}

	};

	@SuppressWarnings("deprecation")
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		super.setContentView(R.layout.main);
		searchWeatherButton = (Button) findViewById(R.id.searchweather);
		citynameEditText = (EditText) findViewById(R.id.myedit);
		citynameEditText.addTextChangedListener(this);
		citynametTextView = (TextView) findViewById(R.id.city);
		weahterTextView = (TextView) findViewById(R.id.weather);
		tempTextView = (TextView) findViewById(R.id.temp);
		winpTextView = (TextView) findViewById(R.id.wind);
		daysTextView = (TextView) findViewById(R.id.days);
		locationTextView = (TextView) findViewById(R.id.location);
		locationButton = (Button) findViewById(R.id.locationButton);
		gsonButton = (Button) findViewById(R.id.gsonButton);
		gsonTextView = (TextView) findViewById(R.id.gson);

		gsonButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				new Thread() {
					public void run() {
						
						GetCity getCity = new GetCity();
						String id = " ";
						try {
							System.out.println(citynameEditText.getText().toString());
							id = getCity.weaid(citynameEditText.getText().toString(),
									weather.this);
						} catch (JSONException e) {
						
							e.printStackTrace();
						}


						String address = "http://api.k780.com:88/?app=weather.future&weaid="
								+ id
								+ "&&appkey=18548&sign=b629c3083e2ac2dcfb6833052717cda5&format=json";

						HttpDownloader httpDownloader = new HttpDownloader();
						String jonString = httpDownloader.download(address);
						GUtil gutil = new GUtil(jonString);
						List<Gson.WeaResult.Result> result = gutil
								.getInformation();
						Gson.WeaResult.Result res = result.get(1);
						System.out.println(res.weather);
						Message msg = new Message();
						msg.obj = res;
						msg.what = 2;
						handler.sendMessage(msg);
					};
				}.start();
			}

		});

		locationClient = new LocationClient(getApplicationContext());
		myListener = new MyLocationListener(locationClient, locationButton,
				locationTextView, citynameEditText) {
			@Override
			public void onCity(boolean flag) {
				getweather();
			}
		}; // 定位监听器
		locationClient.registerLocationListener(myListener);
		LocationClientOption option = new LocationClientOption();
		option.setOpenGps(true); // 是否打开GPS
		option.setCoorType("bd09ll"); // 设置返回值的坐标类型。
		option.setPriority(LocationClientOption.NetWorkFirst); // 设置定位优先级
		option.setProdName("LocationDemo"); // 设置产品线名称。强烈建议您使用自定义的产品线名称，方便我们以后为您提供更高效准确的定位服务。
		option.setScanSpan(5000);
		option.setAddrType("all"); // 设置定时定位的时间间隔。单位毫秒
		locationClient.setLocOption(option);

		locationButton.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (locationClient == null) {
					return;
				}
				if (locationClient.isStarted()) {
					locationButton.setText("Start");
					locationClient.stop();
				} else {
					locationButton.setText("Stop");
					locationClient.start(); 	 	
					/*
					 * 当所设的整数值大于等于1000（ms）时，定位SDK内部使用定时定位模式。调用requestLocation(
					 * )后，每隔设定的时间，定位SDK就会进行一次定位。
					 * 如果定位SDK根据定位依据发现位置没有发生变化，就不会发起网络请求，
					 * 返回上一次定位的结果；如果发现位置改变，就进行网络请求进行定位，得到新的定位结果。
					 * 定时定位时，调用一次requestLocation，会定时监听到定位结果。
					 */
					locationClient.requestLocation();
				}
			}
		});

		searchWeatherButton.setOnClickListener(new OnClickListener() {

			public void onClick(View v) {
				getweather();
			}
		});
	}
	
	private void getweather() {
		new Thread() {
			public void run() {

				GetCity getCity = new GetCity();
				String id = " ";
				try {
					System.out.println(citynameEditText.getText().toString());
					id = getCity.weaid(citynameEditText.getText().toString(),
							weather.this);
				} catch (JSONException e) {
				
					e.printStackTrace();
				}

				String address = "http://api.k780.com:88/?app=weather.future&weaid="
						+ id
						+ "&&appkey=18548&sign=b629c3083e2ac2dcfb6833052717cda5&format=json";

				HttpDownloader httpDownloader = new HttpDownloader();
				String jonString = httpDownloader.download(address);
				Message msg = new Message();
				msg.obj = jonString;
				msg.what = weather.SET;
				handler.sendMessage(msg);
		
			};
		}.start();
	}

	@Override
	public void beforeTextChanged(CharSequence s, int start, int count,
			int after) {

	}

	@Override
	public void onTextChanged(CharSequence s, int start, int before, int count) {

	}

	@Override
	public void afterTextChanged(Editable s) {
		// getweather();
	}

}
